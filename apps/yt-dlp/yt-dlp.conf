# VERBOSITY AND SIMULATION OPTIONS
# https://github.com/yt-dlp/yt-dlp#verbosity-and-simulation-options

# Print various debugging information
--verbose

# Activate quiet mode. If used with --verbose, print the log to stderr
#--quiet
# Deactivate quiet mode. (Default)
#--no-quiet

# Show progress bar, even if in quiet mode
--progress
# Do not print progress bar
#--no-progress
# Output progress bar as new lines
#--newline
# Display progress in console titlebar
#--console-title
# Template for progress outputs, optionally prefixed with one of "download:" (default), "download-title:" (the console title), "postprocess:",  or "postprocess-title:".
# The video's fields are accessible under the "info" key and the progress attributes are accessible under "progress" key. E.g. --console-title --progress-template "download-title:%(info.id)s-%(progress.eta)s"
#--progress-template [TYPES:]TEMPLATE
# Time between progress output (default: 0)
--progress-delta 1

# Ignore warnings
--no-warnings

# Do not download the video and do not write anything to disk
#--simulate
# Download the video even if printing/listing options are used
#--no-simulate

# Do not download the video but write all related files (Alias: --no-download)
#--skip-download

# Ignore "No video formats" error. Useful for extracting metadata even if the videos are not actually available for download (experimental)
#--ignore-no-formats-error
# Throw error when no downloadable video formats are found (default)
#--no-ignore-no-formats-error

# Deep debugging

# Field name or output template to print to screen, optionally prefixed with when to print it, separated by a ":".
# Supported values of "WHEN" are the same as that of --use-postprocessor (default: video). Implies --quiet.
# Implies --simulate unless --no-simulate or later stages of WHEN are used. This option can be used multiple times
#--print [WHEN:]TEMPLATE
# Append given template to the file. The values of WHEN and TEMPLATE are the same as that of --print.
# FILE uses the same syntax as the output template. This option can be used multiple times
#--print-to-file [WHEN:]TEMPLATE FILE

# Quiet, but print JSON information for each video. Simulate unless --no-simulate is used.
# See "OUTPUT TEMPLATE" for a description of available keys
#--dump-json
# Quiet, but print JSON information for each URL or infojson passed. Simulate unless --no-simulate is used.
# If the URL refers to a playlist, the whole playlist information is dumped in a single line
#--dump-single-json

# Print downloaded pages encoded using base64 to debug problems (very verbose)
#--dump-pages
# Write downloaded intermediary pages to files in the current directory to debug problems
#--write-pages

# Display sent and read HTTP traffic
#--print-traffic



# GENERAL OPTIONS
# https://github.com/yt-dlp/yt-dlp#general-options

# Continue with next video on download errors; e.g. to skip unavailable videos in a playlist (default)
--ignore-errors
# Abort downloading of further videos if an error occurs
#--no-ignore-errors

# Don't load any more configuration files except those given to --config-locations. For backward compatibility, if this option is found inside the system configuration file, the user configuration is not loaded. (Alias: --no-config)
#--ignore-config
# Do not load any custom configuration files (default). When given inside a configuration file, ignore all previous --config-locations defined in the current file
#--no-config-locations
# Location of the main configuration file; either the path to the config or its containing directory ("-" for stdin). Can be used multiple times and inside other configuration files
#--config-locations PATH

# Whether to emit color codes in output, optionally prefixed by the STREAM (stdout or stderr) to apply the setting to. 
# Can be one of "always", "auto" (default), "never", or "no_color" (use non color terminal sequences).
# Use "auto-tty" or "no_color-tty" to decide based on terminal support only. Can be used multiple times
--color "auto-tty"



# WORKAROUNDS
# https://github.com/yt-dlp/yt-dlp#workarounds

# Number of seconds to sleep between requests during data extraction
--sleep-requests 2

# Number of seconds to sleep before each subtitle download
--sleep-subtitles 2

# Number of seconds to sleep before each download. This is the minimum time to sleep when used along with --max-sleep-interval (Alias: --min-sleep-interval)
--min-sleep-interval 5

# Maximum number of seconds to sleep. Can only be used along with --min-sleep-interval
--max-sleep-interval 30

# Specify a custom HTTP header and its value, separated by a colon ":". You can use this option multiple times
#--add-headers FIELD:VALUE

# *Jedi hand-wave* "I am Firefox..."
--user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0"



# DOWNLOAD OPTIONS
# https://github.com/yt-dlp/yt-dlp#download-options

# Number of fragments of a dash/hlsnative video that should be downloaded concurrently (default is 1)
--concurrent-fragments 4

# Maximum download rate in bytes per second, e.g. 50K or 4.2M
--limit-rate 20M

# Minimum download rate in bytes per second below which throttling is assumed and the video data is re-extracted, e.g. 100K
#--throttled-rate R100K

# Number of retries (default is 10), or "infinite"
--retries 3

# Time to sleep between retries in seconds (optionally) prefixed by the type of retry (http (default), fragment, file_access, extractor) to apply the sleep to.
# EXPR can be a number, linear=START[:END[:STEP=1]] or exp=START[:END[:BASE=2]].
# This option can be used multiple times to set the sleep for the different retry types, e.g. --retry-sleep linear=1::2 --retry-sleep fragment:exp=1:20
#--retry-sleep 5

# Process entries in the playlist as they are received. This disables n_entries, --playlist-random and --playlist-reverse
#--lazy-playlist
# Process videos in the playlist only after the entire playlist is parsed (default)
#--no-lazy-playlist



# FILESYSTEM OPTIONS
# https://github.com/yt-dlp/yt-dlp#filesystem-options

# File containing URLs to download ("-" for stdin), one URL per line. Lines starting with "#", ";" or "]" are considered as comments and ignored
#--batch-file "_download.txt"
# Do not read URLs from batch file (default)
#--no-batch-file

# The paths where the files should be downloaded. Specify the type of file and the path separated by a colon ":". All the same TYPES as --output are supported.
# Additionally, you can also provide "home" (default) and "temp" paths. All intermediary files are first downloaded to the temp path and then the final files
# are moved over to the home path after download is finished. This option is ignored if --output is an absolute path
#--paths [TYPES:]PATH

# Restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames
#--restrict-filenames
# Allow Unicode characters, "&" and spaces in filenames (default)
#--no-restrict-filenames
# Force filenames to be Windows-compatible
#--windows-filenames
# Sanitize filenames only minimally
#--no-windows-filenames

# Do not overwrite any files
#--no-overwrites
# Overwrite all video and metadata files. This option includes --no-continue
#--force-overwrites
# Do not overwrite the video, but overwrite related files (default)
#--no-force-overwrites

# Resume partially downloaded files/fragments (default)
#--continue
# Do not resume partially downloaded fragments. If the file is not fragmented, restart download of the entire file
#--no-continue

# Use the Last-modified header to set the file modification time (default)
#--mtime
# Do not use the Last-modified header to set the file modification time
--no-mtime

# Netscape formatted file to read cookies from and dump cookie jar in
#--cookies FILE
# Do not read/dump cookies from/to file (default)
#--no-cookies
# The name of the browser to load cookies from. Currently supported browsers are: brave, chrome, chromium, edge, firefox, opera, safari, vivaldi, whale. 
# Optionally, the KEYRING used for decrypting Chromium cookies on Linux, the name/path of the PROFILE to load cookies from, and the CONTAINER name (if Firefox) ("none" for no container)
# can be given with their respective separators. By default, all containers of the most recently accessed profile are used. Currently supported keyrings are: basictext, gnomekeyring, kwallet, kwallet5, kwallet6
#--cookies-from-browser firefox
# Do not load cookies from browser (default)
#--no-cookies-from-browser

# Location in the filesystem where yt-dlp can store some downloaded information (such as client ids and signatures) permanently. By default ${XDG_CACHE_HOME}/yt-dlp
#--cache-dir "/g/marked for deletion/yt-dlp-cache"
# Disable filesystem caching
#--no-cache-dir
# Delete all filesystem cache files
#--rm-cache-dir



# THUMBNAIL OPTIONS
# https://github.com/yt-dlp/yt-dlp#thumbnail-options

# Write thumbnail image to disk
--write-thumbnail
# Do not write thumbnail image to disk (default)
#--no-write-thumbnail
# Write all thumbnail image formats to disk
#--write-all-thumbnails

# List available thumbnails of each video. Simulate unless --no-simulate is used
#--list-thumbnails



# VIDEO SELECTION
# https://github.com/yt-dlp/yt-dlp#video-selection

#--download-archive "_extra/_archive.log"
#--download-archive "_archive.log"

# Comma separated playlist_index of the items to download. You can specify a range using "[START]:[STOP][:STEP]".
# For backward compatibility, START-STOP is also supported. Use negative indices to count from the right and
# negative STEP to download in reverse order. E.g. "-I 1:3,7,-5::2" used on a playlist of size 15 will download the items at index 1,2,3,7,11,13,15
#--playlist-items ITEM_SPEC

# Download only videos uploaded on or before this date. The date formats accepted are the same as --date
#--datebefore DATE
# Download only videos uploaded on or after this date. The date formats accepted are the same as --date
#--dateafter DATE

# Generic video filter. Any "OUTPUT TEMPLATE" field can be compared with a number or a string using the operators
# defined in "Filtering Formats". You can also simply specify a field to match if the field is present, use
# "!field" to check if the field is not present, and "&" to check multiple conditions. Use a "\" to escape "&" or
# quotes if needed. If used multiple times, the filter matches if atleast one of the conditions are met.
# E.g. --match-filter !is_live --match-filter "like_count>?100 & description~='(?i)\bcats \& dogs\b'"
# matches only videos that are not live OR those that have a like count more than 100
# (or the like field is not available) and also has a description that contains the phrase "cats & dogs"
# (caseless). Use "--match-filter -" to interactively ask whether to download each video
--match-filter "!is_live & !live"

# Download only the video, if the URL refers to a video and a playlist
#--no-playlist
# Download the playlist, if the URL refers to a video and a playlist
#--yes-playlist

# Number of allowed failures until the rest of the playlist is skipped
--skip-playlist-after-errors 3



# VIDEO FORMAT OPTIONS
# https://github.com/yt-dlp/yt-dlp#video-format-options
# https://github.com/TheFrenchGhosty/TheFrenchGhostys-Ultimate-YouTube-DL-Scripts-Collection

# Video format code, see "FORMAT SELECTION" for more details
#--format "(
#	 bestvideo*[height=1440][fps>30]
#	/bestvideo*[height>=1080][fps>30]
#	/bestvideo*[height>=720][fps>30]

#	/bestvideo*[height>=1440]
#	/bestvideo*[height>=1080]
#	/bestvideo*[height>=720]
#	/bestvideo*
#)+(bestaudio)/best"
--format "
(bv[vcodec^=av01][height=1440][fps>30]
/bv[vcodec^=vp09.02][height=1440][fps>30]
/bv[vcodec^=vp09.00][height=1440][fps>30]
/bv[vcodec^=vp9][height=1440][fps>30]
/bv[vcodec^=avc1][height=1440][fps>30]
/bv[height=1440][fps>30]
/bv[vcodec^=av01][height=1440]
/bv[vcodec^=vp09.02][height=1440]
/bv[vcodec^=vp09.00][height=1440]
/bv[vcodec^=vp9][height=1440]
/bv[vcodec^=avc1][height=1440]
/bv[height=1440]

/bv[vcodec^=av01][height>=1080][fps>30]
/bv[vcodec^=vp09.02][height>=1080][fps>30]
/bv[vcodec^=vp09.00][height>=1080][fps>30]
/bv[vcodec^=vp9][height>=1080][fps>30]
/bv[vcodec^=avc1][height>=1080][fps>30]
/bv[height>=1080][fps>30]
/bv[vcodec^=av01][height>=1080]
/bv[vcodec^=vp09.02][height>=1080]
/bv[vcodec^=vp09.00][height>=1080]
/bv[vcodec^=vp9][height>=1080]
/bv[vcodec^=avc1][height>=1080]
/bv[height>=1080]

/bv[vcodec^=av01][height>=720][fps>30]
/bv[vcodec^=vp09.02][height>=720][fps>30]
/bv[vcodec^=vp09.00][height>=720][fps>30]
/bv[vcodec^=vp9][height>=720][fps>30]
/bv[vcodec^=avc1][height>=720][fps>30]
/bv[height>=720][fps>30]
/bv[vcodec^=av01][height>=720]
/bv[vcodec^=vp09.02][height>=720]
/bv[vcodec^=vp09.00][height>=720]
/bv[vcodec^=vp9][height>=720]
/bv[vcodec^=avc1][height>=720]
/bv[height>=720]

/bv[vcodec^=av01][height>=480][fps>30]
/bv[vcodec^=vp09.02][height>=480][fps>30]
/bv[vcodec^=vp09.00][height>=480][fps>30]
/bv[vcodec^=vp9][height>=480][fps>30]
/bv[vcodec^=avc1][height>=480][fps>30]
/bv[height>=480][fps>30]
/bv[vcodec^=av01][height>=480]
/bv[vcodec^=vp09.02][height>=480]
/bv[vcodec^=vp09.00][height>=480]
/bv[vcodec^=vp9][height>=480]
/bv[vcodec^=avc1][height>=480]
/bv[height>=480]

/bv[vcodec^=av01][height>=360][fps>30]
/bv[vcodec^=vp09.02][height>=360][fps>30]
/bv[vcodec^=vp09.00][height>=360][fps>30]
/bv[vcodec^=vp9][height>=360][fps>30]
/bv[vcodec^=avc1][height>=360][fps>30]
/bv[height>=360][fps>30]
/bv[vcodec^=av01][height>=360]
/bv[vcodec^=vp09.02][height>=360]
/bv[vcodec^=vp09.00][height>=360]
/bv[vcodec^=vp9][height>=360]
/bv[vcodec^=avc1][height>=360]
/bv[height>=360]

/bv[vcodec^=avc1][height>=240][fps>30]
/bv[vcodec^=av01][height>=240][fps>30]
/bv[vcodec^=vp09.02][height>=240][fps>30]
/bv[vcodec^=vp09.00][height>=240][fps>30]
/bv[vcodec^=vp9][height>=240][fps>30]
/bv[height>=240][fps>30]
/bv[vcodec^=avc1][height>=240]
/bv[vcodec^=av01][height>=240]
/bv[vcodec^=vp09.02][height>=240]
/bv[vcodec^=vp09.00][height>=240]
/bv[vcodec^=vp9][height>=240]
/bv[height>=240]

/bv[vcodec^=avc1][height>=144][fps>30]
/bv[vcodec^=av01][height>=144][fps>30]
/bv[vcodec^=vp09.02][height>=144][fps>30]
/bv[vcodec^=vp09.00][height>=144][fps>30]
/bv[vcodec^=vp9][height>=144][fps>30]
/bv[height>=144][fps>30]
/bv[vcodec^=avc1][height>=144]
/bv[vcodec^=av01][height>=144]
/bv[vcodec^=vp09.02][height>=144]
/bv[vcodec^=vp09.00][height>=144]
/bv[vcodec^=vp9][height>=144]
/bv[height>=144]

/bv)+
(ba[acodec^=opus]/ba)
/b"

# Sort the formats by the fields given, see "Sorting Formats" for more details
#--format-sort SORTORDER

# Force user specified sort order to have precedence over all fields, see "Sorting Formats" for more details (Alias: --S-force)
#--format-sort-force
# Some fields have precedence over the user specified sort order (default)
#--no-format-sort-force

# Allow multiple video streams to be merged into a single file
--video-multistreams
# Only one video stream is downloaded for each output file (default)
#--no-video-multistreams

# Allow multiple audio streams to be merged into a single file
--audio-multistreams
# Only one audio stream is downloaded for each output file (default)
#--no-audio-multistreams

# Prefer video formats with free containers over non-free ones of the same quality. Use with "-S ext" to strictly prefer free containers irrespective of quality
#--prefer-free-formats
# Don't give any special preference to free containers (default)
#--no-prefer-free-formats

# Make sure formats are selected only from those that are actually downloadable
#--check-formats
# Check all formats for whether they are actually downloadable
#--check-all-formats
# Do not check that the formats are actually downloadable
#--no-check-formats

# List available formats of each video. Simulate unless --no-simulate is used
#--list-formats

# Containers that may be used when merging formats, separated by "/", e.g. "mp4/mkv". Ignored if no merge is required. (currently supported: avi, flv, mkv, mov, mp4, webm)
--merge-output-format "mkv"



# SUBTITLE OPTIONS
# https://github.com/yt-dlp/yt-dlp#subtitle-options

# Write subtitle file
--write-subs
# Do not write subtitle file (default)
#--no-write-subs

# Write automatically generated subtitle file (Alias: --write-automatic-subs)
--write-auto-subs
# Do not write auto-generated subtitles (default) (Alias: --no-write-automatic-subs)
#--no-write-auto-subs

# List available subtitles of each video. Simulate unless --no-simulate is used
#--list-subs

# Subtitle format; accepts formats preference separated by "/", e.g. "srt" or "ass/srt/best"
--sub-format "srt/best"

# Languages of the subtitles to download (can be regex) or "all" separated by commas, e.g. --sub-langs "en.*,ja"
# (where "en.*" is a regex pattern that matches "en" followed by 0 or more of any character).
# You can prefix the language code with a "-" to exclude it from the requested languages, e.g. --sub- langs all,-live_chat.
# Use --list-subs for a list of available language tags
--sub-langs "en,en-en,-live_chat"



# POST-PROCESSING OPTIONS
# https://github.com/yt-dlp/yt-dlp#post-processing-options

# Convert video files to audio-only files (requires ffmpeg and ffprobe)
#--extract-audio

# Format to convert the audio to when -x is used. (currently supported: best (default), aac, alac, flac, m4a, mp3, opus, vorbis, wav).
# You can specify multiple rules using similar syntax as --remux-video
#--audio-format FORMAT

# Specify ffmpeg audio quality to use when converting the audio with -x.
# Insert a value between 0 (best) and 10 (worst) for VBR or a specific bitrate like 128K (default 5)
#--audio-quality QUALITY

# Remux the video into another container if necessary (currently supported: avi, flv, gif, mkv, mov, mp4, webm, aac, aiff, alac, flac, m4a, mka, mp3, ogg, opus, vorbis, wav).
# If the target container does not support the video/audio codec, remuxing will fail.
# You can specify multiple rules; e.g. "aac>m4a/mov>mp4/mkv" will remux aac to m4a, mov to mp4 and anything else to mkv
#--remux-video FORMAT
--remux-video "aac>mka/m4a>mka/opus>mka/mkv"

# Re-encode the video into another format if necessary. The syntax and supported formats are the same as --remux-video
#--recode-video FORMAT

# Give these arguments to the postprocessors. Specify the postprocessor/executable name and the arguments separated by a colon ":" to give
# the argument to the specified postprocessor/executable. Supported PP are: Merger, ModifyChapters, SplitChapters, ExtractAudio, VideoRemuxer,
# VideoConvertor, Metadata, EmbedSubtitle, EmbedThumbnail, SubtitlesConvertor, ThumbnailsConvertor, FixupStretched, FixupM4a, FixupM3u8,
# FixupTimestamp and FixupDuration. The supported executables are: AtomicParsley, FFmpeg and FFprobe.
# You can also specify "PP+EXE:ARGS" to give the arguments to the specified executable only when being used by the specified postprocessor.
# Additionally, for ffmpeg/ffprobe, "_i"/"_o" can be appended to the prefix optionally followed by a number to pass the argument before the specified input/output file,
# e.g. --ppa "Merger+ffmpeg_i1:-v quiet". You can use this option multiple times to give different arguments to different postprocessors. (Alias: --ppa)
#--postprocessor-args NAME:ARGS

# Keep the intermediate video file on disk after post-processing
#--keep-video
# Delete the intermediate video file after post-processing (default)
#--no-keep-video

# Overwrite post-processed files (default)
#--post-overwrites
# Do not overwrite post-processed files
#--no-post-overwrites

# Embed subtitles in the video (only for mp4, webm and mkv videos)
--embed-subs
# Do not embed subtitles (default)
#--no-embed-subs

# Embed thumbnail in the video as cover art
--embed-thumbnail
# Do not embed thumbnail (default)
#--no-embed-thumbnail

# Embed metadata to the video file. Also embeds chapters/infojson if present unless --no-embed-chapters/--no-embed-info-json are used (Alias: --add-metadata)
--embed-metadata
# Do not add metadata to file (default) (Alias: --no-add-metadata)
#--no-embed-metadata

# Add chapter markers to the video file (Alias: --add-chapters)
--embed-chapters
# Do not add chapter markers (default) (Alias: --no-add-chapters)
#--no-embed-chapters

# Embed the infojson as an attachment to mkv/mka video files
#--embed-info-json
# Do not embed the infojson as an attachment to the video file
--no-embed-info-json

# Parse additional metadata like title/artist from other fields; see "MODIFYING METADATA" for details.
# Supported values of "WHEN" are the same as that of --use-postprocessor (default: pre_process)
# https://github.com/yt-dlp/yt-dlp#modifying-metadata
#--parse-metadata [WHEN:]FROM:TO
#--parse-metadata "%(title)s:%(meta_title)s"                     # Title field
--parse-metadata "%(channel,creator,uploader)s:%(meta_artist)s" # Artist
--parse-metadata "%(upload_date>%Y-%m-%d)s:%(meta_date)s"       # Date
--parse-metadata "%(upload_date>%Y)s:%(meta_year)s"             # Year
--parse-metadata ":(?P<meta_synopsis>)"                         # Synopsis is kinda useless :\
# TESTING vvv
#--parse-metadata "%(series,playlist_title|)s:%(meta_show)s"                 # Show
#--parse-metadata "%(episode_number,playlist_index|)s:%(meta_episode_sort)s" # Episode sort

# Replace text in a metadata field using the given regex. This option can be used multiple times.
# Supported values of "WHEN" are the same as that of --use-postprocessor (default: pre_process)
#--replace-in-metadata [WHEN:]FIELDS REGEX REPLACE

# Write metadata to the video file's xattrs (using Dublin Core and XDG standards)
#--xattrs

# Concatenate videos in a playlist. One of "never", "always", or "multi_video" (default; only when the videos form a single show).
# All the video files must have the same codecs and number of streams to be concatenable.
# The "pl_video:" prefix can be used with "--paths" and "--output" to set the output filename for the concatenated files. See "OUTPUT TEMPLATE" for details
#--concat-playlist POLICY

# Automatically correct known faults of the file. One of never (do nothing), warn (only emit a warning),
# detect_or_warn (the default; fix the file if we can, warn otherwise), force (try fixing even if the file already exists)
#--fixup POLICY

# Location of the ffmpeg binary; either the path to the binary or its containing directory
--ffmpeg-location "$USERPROFILE/.yt-dlp/ffmpeg/latest/bin"

# Execute a command, optionally prefixed with when to execute it, separated by a ":".
# Supported values of "WHEN" are the same as that of --use-postprocessor (default: after_move).
# The same syntax as the output template can be used to pass any field as arguments to the command.
# If no fields are passed, %(filepath,_filename|)q is appended to the end of the command. This option can be used multiple times
#--exec [WHEN:]CMD
# Remove any previously defined --exec
#--no-exec

# Convert the subtitles to another format (currently supported: ass, lrc, srt, vtt).
# Use "--convert-subs none" to disable conversion (default) (Alias: --convert-subtitles)
--convert-subs srt

# Convert the thumbnails to another format (currently supported: jpg, png, webp). You can specify multiple rules using similar syntax as "--remux-video".
# Use "--convert-thumbnails none" to disable conversion (default)
#--convert-thumbnails FORMAT

# Split video into multiple files based on internal chapters.
# The "chapter:" prefix can be used with "--paths" and "--output" to set the output filename for the split files. See "OUTPUT TEMPLATE" for details
#--split-chapters
# Do not split video based on chapters (default)
#--no-split-chapters

# Remove chapters whose title matches the given regular expression. The syntax is the same as --download-sections. This option can be used multiple times
#--remove-chapters REGEX
# Do not remove any chapters from the file (default)
#--no-remove-chapters

# Force keyframes at cuts when downloading/splitting/removing sections. This is slow due to needing a re-encode, but the resulting video may have fewer artifacts around the cuts
#--force-keyframes-at-cuts
# Do not force keyframes around the chapters when cutting/splitting (default)
#--no-force-keyframes-at-cuts

# The (case-sensitive) name of plugin postprocessors to be enabled, and (optionally) arguments to be passed to it, separated by a colon ":".
# ARGS are a semicolon ";" delimited list of NAME=VALUE. The "when" argument determines when the postprocessor is invoked.
# It can be one of "pre_process" (after video extraction), "after_filter" (after video passes filter), "video" (after --format; before --print/--output),
# "before_dl" (before each video download), "post_process" (after each video download; default), "after_move" (after moving the video file to its final location),
# "after_video" (after downloading and processing all formats of a video), or "playlist" (at end of playlist). This option can be used multiple times to add different postprocessors
#--use-postprocessor NAME[:ARGS]



# SPONSORBLOCK OPTIONS
# https://github.com/yt-dlp/yt-dlp#sponsorblock-options

# SponsorBlock categories to create chapters for, separated by commas. Available categories are
# sponsor, intro, outro, selfpromo, preview, filler, interaction, music_offtopic, poi_highlight, chapter, all and default (=all).
# You can prefix the category with a "-" to exclude it. See [1] for descriptions of the categories.
# E.g. --sponsorblock-mark all,-preview [1] https://wiki.sponsor.ajay.app/w/Segment_Categories
#--sponsorblock-mark "sponsor,selfpromo"

# SponsorBlock categories to be removed from the video file, separated by commas.
# If a category is present in both mark and remove, remove takes precedence.
# The syntax and available categories are the same as for --sponsorblock-mark except that "default" refers to "all,-filler" and poi_highlight, chapter are not available
#--sponsorblock-remove CATS

# An output template for the title of the SponsorBlock chapters created by --sponsorblock-mark.
# The only available fields are start_time, end_time, category, categories, name, category_names. Defaults to "[SponsorBlock]: %(category_names)l"
#--sponsorblock-chapter-title TEMPLATE

# Disable both --sponsorblock-mark and --sponsorblock-remove
#--no-sponsorblock

# SponsorBlock API location, defaults to https://sponsor.ajay.app
#--sponsorblock-api URL



# EXTRACTOR OPTIONS
# https://github.com/yt-dlp/yt-dlp#extractor-options

# Number of retries for known extractor errors (default is 3), or "infinite"
#--extractor-retries RETRIES

# Process dynamic DASH manifests (default) (Alias: --no-ignore-dynamic-mpd)
#--allow-dynamic-mpd
# Do not process dynamic DASH manifests (Alias: --no-allow-dynamic-mpd)
#--ignore-dynamic-mpd

# Split HLS playlists to different formats at discontinuities such as ad breaks
#--hls-split-discontinuity
# Do not split HLS playlists into different formats at discontinuities such as ad breaks (default)
#--no-hls-split-discontinuity

# Pass ARGS arguments to the IE_KEY extractor. See "EXTRACTOR ARGUMENTS" for details. You can use this option multiple times to give arguments for different extractors
#--extractor-args IE_KEY:ARGS



# OUTPUT TEMPLATE
# https://github.com/yt-dlp/yt-dlp#output-template
# https://github.com/yt-dlp/yt-dlp#output-template-examples

# Write video description to a .description file
#--write-description
# Do not write video description (default)
#--no-write-description

# Write video metadata to a .info.json file (this may contain personal information)
--write-info-json
# Do not write video metadata (default)
#--no-write-info-json

# Write playlist metadata in addition to the video metadata when using --write-info-json, --write-description etc. (default)
#--write-playlist-metafiles
# Do not write playlist metadata when using --write-info-json, --write-description etc.
#--no-write-playlist-metafiles

# Retrieve video comments to be placed in the infojson. The comments are fetched even without this option if the extraction is known to be quick (Alias: --get-comments)
#--write-comments
# Do not retrieve video comments unless the extraction is known to be quick (Alias: --no-get-comments)
#--no-write-comments


# Output filename template; see "OUTPUT TEMPLATE" for details
#-o [TYPES:]TEMPLATE

# Placeholder for unavailable fields in --output (default: "NA")
#--output-na-placeholder TEXT


# Individual videos
-o                   "%(title)s [%(id)s].%(ext)s"
#-o "description:extra/%(title)s [%(id)s]"
-o    "infojson:extra/%(title)s [%(id)s]"
-o   "thumbnail:extra/%(title)s [%(id)s]"
-o     "subtitle:subs/%(title)s [%(id)s]"

# Playlists - indexed
#-o    "description:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/extra/%(playlist_index&{} - |)s%(title)s [%(id)s]"
#-o       "infojson:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/extra/%(playlist_index&{} - |)s%(title)s [%(id)s]"
#-o       "pl_video:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/%(playlist_index&{} - |)s%(title)s [%(id)s].%(ext)s"
#-o "pl_description:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/%(playlist_index&{} - |)s%(title)s [%(id)s]"
#-o    "pl_infojson:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/%(playlist_index&{} - |)s%(title)s [%(id)s]"

# Playlists - non-indexed
#-o       "infojson:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/extra/%(title)s [%(id)s]"
#-o    "description:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/extra/%(title)s [%(id)s]"
#-o       "pl_video:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/%(title)s [%(id)s].%(ext)s"
#-o "pl_description:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/%(title)s [%(id)s]"
#-o    "pl_infojson:%(playlist&{}|Unknown)s%(playlist_id& [{}]|)s/%(title)s [%(id)s]"

# Channels
#-o    "description:%(channel,creator,uploader&{}|Unknown)s/extra/%(title)s [%(id)s]"
#-o       "infojson:%(channel,creator,uploader&{}|Unknown)s/extra/%(title)s [%(id)s]"
#-o       "pl_video:%(channel,creator,uploader&{}|Unknown)s/%(title)s [%(id)s].%(ext)s"
#-o "pl_description:%(channel,creator,uploader&{}|Unknown)s/%(title)s [%(id)s]"
#-o    "pl_infojson:%(channel,creator,uploader&{}|Unknown)s/%(title)s [%(id)s]"



# DO NOT USE THIS IN CONFIG FILES - ONLY IN BASH SCRIPTS.
# 2>&1 | tee "_config/output.log"
